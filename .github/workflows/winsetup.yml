name: Setup Windows Server

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  setup-windows-server:
    runs-on: windows-latest

    steps:
      - name: Check Out Repository
        uses: actions/checkout@v4

      - name: Setup Windows Environment
        run: |
          # Update system and prepare environment
          Write-Host "Setting up Windows environment..."
          
          # Enable long paths if needed
          New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1 -PropertyType DWORD -Force
          
          # Configure Windows settings
          Set-ExecutionPolicy Bypass -Scope Process -Force
          
          # Install Chocolatey if not already installed
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
            # Refresh environment variables
            $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          }
          
          Write-Host "Windows environment setup completed successfully"

      - name: Install Python 3.10
        run: |
          Write-Host "Installing Python 3.10..."
          
          # Install Python 3.10 using Chocolatey
          choco install python3 --version=3.10.11 -y --no-progress
          
          # Refresh environment variables
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          
          # Verify Python installation
          $pythonVersion = python --version
          Write-Host "Installed: $pythonVersion"
          
          # Upgrade pip
          python -m pip install --upgrade pip
          
          # Verify pip installation
          $pipVersion = pip --version
          Write-Host "Pip version: $pipVersion"
          
          # Check if Python is in PATH
          if (Get-Command python -ErrorAction SilentlyContinue) {
            Write-Host "Python is successfully installed and available in PATH"
          } else {
            Write-Error "Python installation failed or not available in PATH"
            exit 1
          }

      - name: Install RustDesk
        id: install_rustdesk
        run: |
          # Execute silent installation using the executable in the repository
          Write-Host "Installing RustDesk..." -ForegroundColor Cyan
          
          # Check if the RustDesk installer exists
          if (Test-Path "./rustdesk-1.3.8-x86_64.exe") {
            Write-Host "Found RustDesk installer in repository" -ForegroundColor Green
            
            # Stop any existing RustDesk processes
            Get-Process -Name "rustdesk" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
            
            # Execute silent installation with timeout to prevent hanging
            Write-Host "Running installer with --silent flag"
            try {
              $process = Start-Process -FilePath "./rustdesk-1.3.8-x86_64.exe" -ArgumentList "--silent" -PassThru -ErrorAction Stop
              
              # Wait for process with timeout (5 minutes max - increased from 3 minutes)
              $timeoutSeconds = 300
              Write-Host "Waiting up to $timeoutSeconds seconds for installation to complete..."
              
              if (-not $process.WaitForExit($timeoutSeconds * 1000)) {
                Write-Host "Installation process timed out after $timeoutSeconds seconds" -ForegroundColor Yellow
                try {
                  $process | Stop-Process -Force -ErrorAction SilentlyContinue
                  Write-Host "Terminated hanging installation process" -ForegroundColor Yellow
                  # Continue with installation verification even after timeout
                  Write-Host "Continuing with installation verification despite timeout..." -ForegroundColor Yellow
                } catch {
                  Write-Host "Failed to terminate process: $_" -ForegroundColor Red
                }
              } else {
                Write-Host "Installation process completed with exit code: $($process.ExitCode)" -ForegroundColor Cyan
              }
            } catch {
              Write-Host "Error starting RustDesk installer: $_" -ForegroundColor Red
              # Try alternative installation method if direct installation fails
              Write-Host "Attempting alternative installation via Chocolatey..." -ForegroundColor Yellow
              choco install rustdesk -y --force | Tee-Object -FilePath rustdesk_install.log
            }
            
            # Give the installation a moment to complete
            Start-Sleep -Seconds 10  # Increased from 5 seconds
            
            # Verify installation
            $install_path = "C:\Program Files\RustDesk\rustdesk.exe"
            if (Test-Path $install_path) {
              Write-Host "RustDesk installed successfully at $install_path" -ForegroundColor Green
            } else {
              Write-Host "RustDesk not found at expected path, checking alternative locations..." -ForegroundColor Yellow
            }
          } else {
            # Fallback to Chocolatey if the installer is not found
            Write-Host "RustDesk installer not found in repository, installing via Chocolatey..." -ForegroundColor Yellow
            choco install rustdesk -y --force | Tee-Object -FilePath rustdesk_install.log
            Start-Sleep -Seconds 5
          }
          
          # Check known installation locations
          $paths = @(
            "C:\Program Files\RustDesk",
            "C:\Program Files (x86)\RustDesk",
            "C:\Users\$env:USERNAME\AppData\Local\Programs\RustDesk",
            "C:\Users\$env:USERNAME\AppData\Local\RustDesk",
            "C:\Users\runneradmin\AppData\Local\Programs\RustDesk"
          )
          
          $install_path = $null
          foreach ($path in $paths) {
            Write-Host "Checking for RustDesk in $path"
            if (Test-Path "$path\rustdesk.exe") {
              $install_path = "$path\rustdesk.exe"
              Write-Host "Found RustDesk at: $install_path" -ForegroundColor Green
              break
            }
          }
          
          # Search entire system for RustDesk.exe if not found in known locations
          if (-not $install_path) {
            Write-Host "RustDesk not found in known locations, searching system..." -ForegroundColor Yellow
            $found_paths = Get-ChildItem -Path "C:\Program Files", "C:\Program Files (x86)", "C:\Users" -Recurse -Filter "rustdesk.exe" -ErrorAction SilentlyContinue | Select-Object -ExpandProperty FullName
            if ($found_paths) {
              $install_path = $found_paths[0]
              Write-Host "Found RustDesk at: $install_path" -ForegroundColor Green
            }
          }
          
          # Final check and start service
          if ($install_path -and (Test-Path $install_path)) {
            echo "RUSTDESK_PATH=$install_path" | Out-File -FilePath $env:GITHUB_ENV -Append
            Write-Host "RustDesk installed at: $install_path" -ForegroundColor Green
            
            # Add firewall rule
            Write-Host "Adding firewall rule for RustDesk"
            netsh advfirewall firewall add rule name="RustDesk" dir=in action=allow program="$install_path" enable=yes
            
            # Start RustDesk service
            Write-Host "Starting RustDesk service"
            Start-Process -FilePath $install_path -WindowStyle Hidden
            Start-Sleep -Seconds 10  # Give RustDesk time to initialize
          } else {
            Write-Host "Failed to detect RustDesk installation path!" -ForegroundColor Red
            exit 1
          }

      # Get RustDesk ID
      - name: Get RustDesk ID
        id: rustdesk_id
        run: |
          $rustdesk_exe = "${{ env.RUSTDESK_PATH }}"
          
          if (Test-Path $rustdesk_exe) {
            # Try to get the RustDesk ID
            try {
              # Ensure RustDesk service is running
              $rustdesk_process = Get-Process -Name "rustdesk" -ErrorAction SilentlyContinue
              if (-not $rustdesk_process) {
                Write-Host "RustDesk service not running, starting it now..." -ForegroundColor Yellow
                Start-Process -FilePath $rustdesk_exe -WindowStyle Hidden
                Start-Sleep -Seconds 30  # Give RustDesk more time to initialize
              }
              
              # Restart RustDesk service to ensure it's in a clean state
              Write-Host "Restarting RustDesk service for a clean state..." -ForegroundColor Cyan
              Get-Process -Name "rustdesk" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 5
              Start-Process -FilePath $rustdesk_exe -WindowStyle Hidden
              Start-Sleep -Seconds 30  # Give RustDesk more time to initialize
              
              # Try multiple times to get the ID
              $max_attempts = 5  # Increased from 3 to 5 attempts
              $attempt = 1
              $rustdesk_id = $null
              $env:RUST_BACKTRACE = 1  # Enable backtrace for debugging
              
              while ($attempt -le $max_attempts -and -not $rustdesk_id) {
                Write-Host "Attempt $attempt of $max_attempts to get RustDesk ID..."
                
                # Try different methods to get the ID
                try {
                  # Method 1: Direct command
                  Write-Host "Method 1: Using direct command..." -ForegroundColor Cyan
                  $rustdesk_id = & $rustdesk_exe --get-id 2>&1
                  
                  # Check if we got a valid ID
                  if ($rustdesk_id -and $rustdesk_id -match '\d{9,}') {
                    Write-Host "RustDesk ID found: $rustdesk_id" -ForegroundColor Green
                  } else {
                    Write-Host "Method 1 failed, trying alternative method..." -ForegroundColor Yellow
                    
                    # Method 2: Check config file
                    Write-Host "Method 2: Checking config file..." -ForegroundColor Cyan
                    $config_path = "C:\Users\runneradmin\.config\rustdesk\config\rustdesk.toml"
                    if (Test-Path $config_path) {
                      $config_content = Get-Content $config_path -Raw
                      if ($config_content -match 'id\s*=\s*"(\d+)"') {
                        $rustdesk_id = $matches[1]
                        Write-Host "RustDesk ID found in config file: $rustdesk_id" -ForegroundColor Green
                      }
                    }
                    
                    # Method 3: Check log files
                    if (-not $rustdesk_id) {
                      Write-Host "Method 3: Checking log files..." -ForegroundColor Cyan
                      $log_path = "C:\Users\runneradmin\.config\rustdesk\log\*"
                      if (Test-Path $log_path) {
                        $log_content = Get-ChildItem -Path $log_path | Sort-Object LastWriteTime -Descending | Select-Object -First 1 | Get-Content -Raw
                        if ($log_content -match 'ID:\s*(\d+)') {
                          $rustdesk_id = $matches[1]
                          Write-Host "RustDesk ID found in log file: $rustdesk_id" -ForegroundColor Green
                        }
                      }
                    }
                  }
                } catch {
                  Write-Host "Error during attempt $attempt: $_" -ForegroundColor Red
                }
                
                if ($rustdesk_id -and $rustdesk_id -match '\d{9,}') {
                  Write-Host "RustDesk ID: $rustdesk_id" -ForegroundColor Green
                  echo "RUSTDESK_ID=$rustdesk_id" | Out-File -FilePath $env:GITHUB_ENV -Append
                  break
                } else {
                  Write-Host "Failed to get RustDesk ID on attempt $attempt" -ForegroundColor Yellow
                  Start-Sleep -Seconds 10  # Increased wait time between attempts
                  $attempt++
                }
              }
              
              if (-not $rustdesk_id -or -not ($rustdesk_id -match '\d{9,}')) {
                Write-Host "Failed to get RustDesk ID after $max_attempts attempts" -ForegroundColor Red
                Write-Host "Attempting to install RustDesk via Chocolatey as a last resort..." -ForegroundColor Yellow
                choco install rustdesk -y --force | Tee-Object -FilePath rustdesk_install_retry.log
                Start-Sleep -Seconds 30
                
                # Try one more time after reinstall
                try {
                  $rustdesk_exe = "C:\Program Files\RustDesk\rustdesk.exe"
                  if (Test-Path $rustdesk_exe) {
                    Start-Process -FilePath $rustdesk_exe -WindowStyle Hidden
                    Start-Sleep -Seconds 30
                    $rustdesk_id = & $rustdesk_exe --get-id 2>&1
                    if ($rustdesk_id -and $rustdesk_id -match '\d{9,}') {
                      Write-Host "RustDesk ID after reinstall: $rustdesk_id" -ForegroundColor Green
                      echo "RUSTDESK_PATH=$rustdesk_exe" | Out-File -FilePath $env:GITHUB_ENV -Append
                      echo "RUSTDESK_ID=$rustdesk_id" | Out-File -FilePath $env:GITHUB_ENV -Append
                    } else {
                      exit 1
                    }
                  } else {
                    exit 1
                  }
                } catch {
                  Write-Host "Final attempt failed: $_" -ForegroundColor Red
                  exit 1
                }
              }
            } catch {
              Write-Host "Error getting RustDesk ID: $_" -ForegroundColor Red
              exit 1
            }
          } else {
            Write-Host "RustDesk executable not found at $rustdesk_exe!" -ForegroundColor Red
            exit 1
          }

      # Install GitHub CLI
      - name: Install GitHub CLI
        run: |
          Write-Host "Installing GitHub CLI..." -ForegroundColor Cyan
          
          # Install GitHub CLI using Chocolatey
          choco install gh -y --no-progress
          
          # Refresh environment variables
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          
          # Verify GitHub CLI installation
          $ghVersion = gh --version
          Write-Host "Installed: $ghVersion" -ForegroundColor Green
          
          # Install Git if not already installed (required for GitHub CLI)
          if (-not (Get-Command git -ErrorAction SilentlyContinue)) {
            Write-Host "Installing Git (required for GitHub CLI)..." -ForegroundColor Yellow
            choco install git -y --no-progress
            $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          }
          
          # Verify Git installation
          $gitVersion = git --version
          Write-Host "Git version: $gitVersion" -ForegroundColor Green
          
          # Check if GitHub CLI is in PATH
          if (Get-Command gh -ErrorAction SilentlyContinue) {
            Write-Host "GitHub CLI is successfully installed and available in PATH" -ForegroundColor Green
          } else {
            Write-Error "GitHub CLI installation failed or not available in PATH"
            exit 1
          }
          
          Write-Host "GitHub CLI installation completed successfully" -ForegroundColor Green

      # Validate and Display Connection Info
      - name: Show RustDesk Connection ID
        run: |
          # Check if RustDesk ID exists in environment
          if (-not $env:RUSTDESK_ID) {
            Write-Host "RustDesk ID not found in environment variables, attempting to retrieve it again..." -ForegroundColor Yellow
            
            # Try to get the ID one more time
            $rustdesk_exe = "${{ env.RUSTDESK_PATH }}"
            if (Test-Path $rustdesk_exe) {
              # Ensure RustDesk is running
              $rustdesk_process = Get-Process -Name "rustdesk" -ErrorAction SilentlyContinue
              if (-not $rustdesk_process) {
                Write-Host "Starting RustDesk process..." -ForegroundColor Yellow
                Start-Process -FilePath $rustdesk_exe -WindowStyle Hidden
                Start-Sleep -Seconds 30
              }
              
              # Try to get the ID
              try {
                $env:RUST_BACKTRACE = 1  # Enable backtrace for debugging
                $rustdesk_id = & $rustdesk_exe --get-id 2>&1
                
                if ($rustdesk_id -and $rustdesk_id -match '\d{9,}') {
                  Write-Host "Successfully retrieved RustDesk ID: $rustdesk_id" -ForegroundColor Green
                  $env:RUSTDESK_ID = $rustdesk_id
                  echo "RUSTDESK_ID=$rustdesk_id" | Out-File -FilePath $env:GITHUB_ENV -Append
                } else {
                  Write-Host "Warning: Could not retrieve RustDesk ID directly" -ForegroundColor Yellow
                  
                  # Check config file as fallback
                  $config_path = "C:\Users\runneradmin\.config\rustdesk\config\rustdesk.toml"
                  if (Test-Path $config_path) {
                    $config_content = Get-Content $config_path -Raw
                    if ($config_content -match 'id\s*=\s*"(\d+)"') {
                      $rustdesk_id = $matches[1]
                      Write-Host "Found RustDesk ID in config file: $rustdesk_id" -ForegroundColor Green
                      $env:RUSTDESK_ID = $rustdesk_id
                      echo "RUSTDESK_ID=$rustdesk_id" | Out-File -FilePath $env:GITHUB_ENV -Append
                    }
                  }
                }
              } catch {
                Write-Host "Error retrieving RustDesk ID: $_" -ForegroundColor Red
              }
            }
          }
          
          # Final check for RustDesk ID
          if (-not $env:RUSTDESK_ID) {
            Write-Host "Warning: Failed to retrieve RustDesk ID, but continuing workflow" -ForegroundColor Yellow
            $env:RUSTDESK_ID = "ID retrieval failed - check logs"
          }
          
          # Verify RustDesk is still running
          $rustdesk_process = Get-Process -Name "rustdesk" -ErrorAction SilentlyContinue
          if (-not $rustdesk_process) {
            Write-Host "Warning: RustDesk process not detected, attempting to restart..." -ForegroundColor Yellow
            Start-Process -FilePath "${{ env.RUSTDESK_PATH }}" -WindowStyle Hidden
            Start-Sleep -Seconds 5
          }
          
          # Display connection information with formatting
          Write-Host "================================================" -ForegroundColor Cyan
          Write-Host "       RUSTDESK CONNECTION INFORMATION          " -ForegroundColor Cyan
          Write-Host "================================================" -ForegroundColor Cyan
          Write-Host "✅ RustDesk setup completed" -ForegroundColor Green
          Write-Host "📋 Connection ID: $env:RUSTDESK_ID" -ForegroundColor Green
          Write-Host "🔧 System Information:" -ForegroundColor Cyan
          Write-Host "   - Python version: $(python --version 2>&1)" 
          Write-Host "   - RustDesk path: ${{ env.RUSTDESK_PATH }}" 
          Write-Host "   - RustDesk process running: $(if ($rustdesk_process) { 'Yes' } else { 'Restarted' })" 
          Write-Host "   - OS: $((Get-CimInstance -ClassName Win32_OperatingSystem).Caption)" 
          Write-Host "================================================" -ForegroundColor Cyan
          
          # Save ID to outputs for potential use in other workflow steps
          echo "RUSTDESK_ID=$env:RUSTDESK_ID" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
